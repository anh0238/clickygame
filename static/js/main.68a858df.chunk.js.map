{"version":3,"sources":["images/treeone.png","images/treetwo.png","images/treethree.png","images/treefour.png","images/treefive.png","images/treesix.png","images/treeseven.png","images/treeeight.png","images/treenine.png","components/NavBar.js","components/Header.js","components/Footer.js","components/Images.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","className","Header","Footer","treeone","treetwo","treethree","treefour","treefive","treesix","treeseven","treeeight","treenine","ImageDisplay","src","alt","App","components_NavBar","components_Header","Images","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8OCYzBC,MAVf,WACI,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,yCCKGE,MAVf,WACI,OACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,wFCKOG,MATf,WACI,OACEL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,8MCQQI,IAASC,IAASC,IAAWC,IAAUC,IAAUC,IAASC,IAAWC,IAAWC,IA0B7EC,MAxBnB,WAOQ,OACGf,EAAAC,EAAAC,cAAA,UACKF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,OAAKc,IAAKV,IAASW,IAAI,aADvB,KAIAjB,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,OAAKc,IAAKT,IAASU,IAAI,aADvB,OCPDC,mLAXX,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACiB,EAAD,MACAnB,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACoB,EAAD,cAPYC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.68a858df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/treeone.b50bf93b.png\";","module.exports = __webpack_public_path__ + \"static/media/treetwo.5783d844.png\";","module.exports = __webpack_public_path__ + \"static/media/treethree.0d433a38.png\";","module.exports = __webpack_public_path__ + \"static/media/treefour.d4be6aaf.png\";","module.exports = __webpack_public_path__ + \"static/media/treefive.f87578b4.png\";","module.exports = __webpack_public_path__ + \"static/media/treesix.b28de937.png\";","module.exports = __webpack_public_path__ + \"static/media/treeseven.78fad0c0.png\";","module.exports = __webpack_public_path__ + \"static/media/treeeight.dc7f6c84.png\";","module.exports = __webpack_public_path__ + \"static/media/treenine.597000b6.png\";","import React from \"react\";\n\nfunction NavBar() {\n    return (\n        <div className=\"navBar\">\n            <span>O'Christmas Tree</span>\n            <span>Click an Image to Begin!</span>\n            <span>Score: 0 | Top Score: 0</span>\n        </div>\n    )\n}\n\nexport default NavBar;","import React from \"react\";\n\nfunction Header () {\n    return (\n      <div className=\"header\">\n        <h1>Christmas Tree Clicky Game:</h1>\n        <h3>Click on an image to earn points, but don't click on any more than once!</h3>\n      </div>\n    );\n  }\n\n\nexport default Header;","import React from \"react\";\n\nfunction Footer() {\n    return (\n      <footer className=\"footer\">\n        <span>-- ClickyGame -- Alex Henderson 2018 --</span>\n      </footer>\n    );\n  }\n\n\nexport default Footer;","import React from \"react\";\nimport { link } from \"react-router\";\n//import { treeone, treetwo, treethree, treefour, treefive, treesix, treeseven, treeeight, treenine } from \"./images\";\nimport treeone from \"../images/treeone.png\";\nimport treetwo from \"../images/treetwo.png\";\nimport treethree from \"../images/treethree.png\";\nimport treefour from \"../images/treefour.png\";\nimport treefive from \"../images/treefive.png\";\nimport treesix from \"../images/treesix.png\";\nimport treeseven from \"../images/treeseven.png\";\nimport treeeight from \"../images/treeeight.png\";\nimport treenine from \"../images/treenine.png\";\n\nconst images = [treeone, treetwo, treethree, treefour, treefive, treesix, treeseven, treeeight, treenine];\n\nfunction ImageDisplay () {\n    /*     for (var i = 0; i < images.length; i++) {\n            // note: we add a key prop here to allow react to uniquely identify each\n            // element in this array. see: https://reactjs.org/docs/lists-and-keys.html\n            images.push(<image key={i} />);\n        } */\n        //return <tbody>{rows}</tbody>;\n        return (\n           <ul>\n                <li>\n                <img src={treeone} alt=\"tree one\" />;\n                </li>\n    \n                <li>\n                <img src={treetwo} alt=\"tree two\" />;\n                </li>\n            </ul> \n            //<tbody>{images}</tbody>\n          \n        \n        );\n    \n    }\n    \n    export default ImageDisplay;\n","import React, {Component} from 'react';\nimport './App.css';\nimport NavBar from \"./components/NavBar\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport ImageDisplay from \"./components/Images\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <NavBar />\n      <Header />\n      <ImageDisplay />\n      <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}